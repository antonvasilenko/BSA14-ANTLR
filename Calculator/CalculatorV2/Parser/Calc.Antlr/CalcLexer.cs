//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\work\binary\learn\ANTLR\BSA14-ANTLR\Calculator\Calc.Antlr\Calc.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace CalculatorV2.Parser.Calc.Antlr {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class CalcLexer : Lexer {
	public const int
		WS=1, LP=2, RP=3, INT=4, OP_MUL=5, OP_SUM=6;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'"
	};
	public static readonly string[] ruleNames = {
		"WS", "LP", "RP", "INT", "DIGIT", "OP_MUL", "OP_SUM"
	};


	public CalcLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	public override string GrammarFileName { get { return "Calc.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\b\'\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3"+
		"\x2\x6\x2\x13\n\x2\r\x2\xE\x2\x14\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4"+
		"\x3\x5\x6\x5\x1E\n\x5\r\x5\xE\x5\x1F\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x2"+
		"\x2\x2\t\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\x2\r\x2\a\xF\x2\b\x3\x2"+
		"\x6\x5\x2\v\f\xF\xF\"\"\x3\x2\x32;\x4\x2,,\x31\x31\x4\x2--//\'\x2\x3\x3"+
		"\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\r\x3"+
		"\x2\x2\x2\x2\xF\x3\x2\x2\x2\x3\x12\x3\x2\x2\x2\x5\x18\x3\x2\x2\x2\a\x1A"+
		"\x3\x2\x2\x2\t\x1D\x3\x2\x2\x2\v!\x3\x2\x2\x2\r#\x3\x2\x2\x2\xF%\x3\x2"+
		"\x2\x2\x11\x13\t\x2\x2\x2\x12\x11\x3\x2\x2\x2\x13\x14\x3\x2\x2\x2\x14"+
		"\x12\x3\x2\x2\x2\x14\x15\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2\x16\x17\b\x2"+
		"\x2\x2\x17\x4\x3\x2\x2\x2\x18\x19\a*\x2\x2\x19\x6\x3\x2\x2\x2\x1A\x1B"+
		"\a+\x2\x2\x1B\b\x3\x2\x2\x2\x1C\x1E\x5\v\x6\x2\x1D\x1C\x3\x2\x2\x2\x1E"+
		"\x1F\x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2\x1F \x3\x2\x2\x2 \n\x3\x2\x2\x2!"+
		"\"\t\x3\x2\x2\"\f\x3\x2\x2\x2#$\t\x4\x2\x2$\xE\x3\x2\x2\x2%&\t\x5\x2\x2"+
		"&\x10\x3\x2\x2\x2\x5\x2\x14\x1F\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CalculatorV2.Parser.Calc.Antlr
