//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:\work\binary\learn\ANTLR\BSA14-ANTLR\Calculator\CalculatorV2\Parser\Calc.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace CalculatorV2.Parser.Antlr {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class CalcParser : Parser {
	public const int
		WS=1, LP=2, RP=3, INT=4, OP_MUL=5, OP_SUM=6;
	public static readonly string[] tokenNames = {
		"<INVALID>", "WS", "'('", "')'", "INT", "OP_MUL", "OP_SUM"
	};
	public const int
		RULE_expr = 0, RULE_value = 1, RULE_entry = 2;
	public static readonly string[] ruleNames = {
		"expr", "value", "entry"
	};

	public override string GrammarFileName { get { return "Calc.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CalcParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ExprContext : ParserRuleContext {
		public ITerminalNode RP() { return GetToken(CalcParser.RP, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public IReadOnlyList<ExprContext> expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ITerminalNode LP() { return GetToken(CalcParser.LP, 0); }
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OP_SUM() { return GetToken(CalcParser.OP_SUM, 0); }
		public ITerminalNode OP_MUL() { return GetToken(CalcParser.OP_MUL, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			switch (_input.La(1)) {
			case LP:
				{
				State = 7; Match(LP);
				State = 8; expr(0);
				State = 9; Match(RP);
				}
				break;
			case INT:
			case OP_SUM:
				{
				State = 11; value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 22;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 20;
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 14;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 15; Match(OP_SUM);
						State = 16; expr(5);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 17;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 18; Match(OP_MUL);
						State = 19; expr(4);
						}
						break;
					}
					} 
				}
				State = 24;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode OP_SUM() { return GetToken(CalcParser.OP_SUM, 0); }
		public ITerminalNode INT() { return GetToken(CalcParser.INT, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			_la = _input.La(1);
			if (_la==OP_SUM) {
				{
				State = 25; Match(OP_SUM);
				}
			}

			State = 28; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntryContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CalcParser.Eof, 0); }
		public EntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entry; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterEntry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitEntry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntryContext entry() {
		EntryContext _localctx = new EntryContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_entry);
		try {
			State = 32;
			switch (_input.La(1)) {
			case LP:
			case INT:
			case OP_SUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 30; expr(0);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\b%\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\xF\n\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x17\n\x2\f\x2\xE\x2\x1A\v\x2"+
		"\x3\x3\x5\x3\x1D\n\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4#\n\x4\x3\x4\x2\x2"+
		"\x3\x2\x5\x2\x2\x4\x2\x6\x2\x2\x2&\x2\xE\x3\x2\x2\x2\x4\x1C\x3\x2\x2\x2"+
		"\x6\"\x3\x2\x2\x2\b\t\b\x2\x1\x2\t\n\a\x4\x2\x2\n\v\x5\x2\x2\x2\v\f\a"+
		"\x5\x2\x2\f\xF\x3\x2\x2\x2\r\xF\x5\x4\x3\x2\xE\b\x3\x2\x2\x2\xE\r\x3\x2"+
		"\x2\x2\xF\x18\x3\x2\x2\x2\x10\x11\f\x6\x2\x2\x11\x12\a\b\x2\x2\x12\x17"+
		"\x5\x2\x2\a\x13\x14\f\x5\x2\x2\x14\x15\a\a\x2\x2\x15\x17\x5\x2\x2\x6\x16"+
		"\x10\x3\x2\x2\x2\x16\x13\x3\x2\x2\x2\x17\x1A\x3\x2\x2\x2\x18\x16\x3\x2"+
		"\x2\x2\x18\x19\x3\x2\x2\x2\x19\x3\x3\x2\x2\x2\x1A\x18\x3\x2\x2\x2\x1B"+
		"\x1D\a\b\x2\x2\x1C\x1B\x3\x2\x2\x2\x1C\x1D\x3\x2\x2\x2\x1D\x1E\x3\x2\x2"+
		"\x2\x1E\x1F\a\x6\x2\x2\x1F\x5\x3\x2\x2\x2 #\x5\x2\x2\x2!#\a\x2\x2\x3\""+
		" \x3\x2\x2\x2\"!\x3\x2\x2\x2#\a\x3\x2\x2\x2\a\xE\x16\x18\x1C\"";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CalculatorV2.Parser.Antlr
